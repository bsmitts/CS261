{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw12240\paperh20160\margl1440\margr1440\vieww25200\viewh27300\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320
\ls1\ilvl0
\f0\fs32 \cf0 {\listtext	1.	}\expnd0\expndtw0\kerning0
How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will 
\f1\i \expnd0\expndtw0\kerning0
double in capacity each time 
\f0\i0 \expnd0\expndtw0\kerning0
a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push? \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will 
\f1\i \expnd0\expndtw0\kerning0
grow by a constant 2 spaces 
\f0\i0 \expnd0\expndtw0\kerning0
each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push? \uc0\u8232 
\f1\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by half when the array is half full or less. Can you devise a sequence of N 
\f1\b \expnd0\expndtw0\kerning0
push() 
\f0\b0 \expnd0\expndtw0\kerning0
and 
\f1\b \expnd0\expndtw0\kerning0
pop() 
\f0\b0 \expnd0\expndtw0\kerning0
operations which will result in poor performance (
\f1\i \expnd0\expndtw0\kerning0
O(N^2) 
\f0\i0 \expnd0\expndtw0\kerning0
total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the initial capacity of the array is N/2.) 
\f1\fs24 \expnd0\expndtw0\kerning0
\
\
}